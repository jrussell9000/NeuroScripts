#!/usr/bin/env python

# Written by John Ollinger
#
# University of Wisconsin, 8/16/09

#Copyright (c) 2006-2007, John Ollinger, University of Wisconsin
#All rights reserved.
#
#Redistribution and use in source and binary forms, with or without
#modification, are permitted provided that the following conditions are
#met:
#
#    * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#    * Redistributions in binary form must reproduce the above
#       copyright notice, this list of conditions and the following
#       disclaimer in the documentation and/or other materials provided
#       with the distribution.
#
#THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
#A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
#OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
#LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
#OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# ** This software was designed to be used only for research purposes. **
# ** Clinical uses are not recommended, and have never been evaluated. **
# ** This software comes with no warranties of any kind whatsoever,    **
# ** and may not be useful for anything.  Use it at your own risk!     **
# ** If these terms are not acceptable, you aren't allowed to use the code.**

import sys
import os
from optparse import OptionParser
from subprocess import Popen, PIPE

from numpy import array, float, arange, zeros, where
from scipy.interpolate import interp1d
from scipy.io import loadmat

from file_io import Wimage, writefile
from wbl_util import GetTmpSpace, except_msg
from plotlib import ScatterPlot

LOGFILE_PREFIX='slice_deconvolve'

class SliceDeconvolve():

    def __init__(self):
        self.GetOptions()
        if self.etco2_files is None:
            logfile = '%s/%s_noetco2.log' % (self.outdir, self.outbase)
        else:
            logfile = '%s/%s_etco2.log' % (self.outdir, self.outbase)
        self.flog = open(logfile, 'w')
        self.flog.write(' '.join(sys.argv) + '\n')
        if os.path.exists('/tmp/debug'):
            cmd = '/bin/rm -rf /tmp/debug'
            self.Exec(cmd)
        if self.debug:
            user_tmp = '/tmp/debug'
        else:
            user_tmp = None
        self.tmp = GetTmpSpace(500, user_tmp=user_tmp)
        self.tmpdir = self.tmp()

    def GetOptions(self):
        usage = \
        'slice_deconvolve [options] --afni-args="${3Ddeconvolve options}"\n' + \
        'Example:\n' + \
        'slice_deconvolve --afni-args="${ARGS}" --etco2_files="checker1.mat checker2.mat"'
        optparser = OptionParser(usage)
        optparser.add_option( "-v", "--verbose", action="store_true",  \
            dest="verbose",default=False, help="Verbose mode.")
        optparser.add_option( "", "--debug", action="store_true",  \
            dest="debug",default=False, help="Debug mode. Set tmp=/tmp/debug.")
#        optparser.add_option( "", "--slice-order", action="store", type=str,  \
#            dest="slice_order",default='altplus', \
#            help="Order in which slices are acquired. Takes on values of " + \
#                 '"altplus" and "altminus".')
        optparser.add_option( "", "--reml", action="store_true",  \
            dest="reml",default=False, help="Execute 3dREMLfit commands " + \
                 "generated by 3dDeconvolve and store resutls..")
        optparser.add_option( "", "--plot-ecto2", action="store_true",  \
            dest="plot_ecto2",default=None, \
            help="Plot end-tidal CO2 regressors.")
        optparser.add_option( "", "--etco2_files", action="store", type=str,  \
            dest="etco2_files",default=None, 
            help="Matlab .mat file containing end-tidal co2 data acquired with the " + \
                 'Biopac and converted with "extract_synced_etco2".')
        optparser.add_option( "", "--afni-args", action="store", type=str,  \
            dest="afni_args",default=None, \
            help="Command line for AFNI's 3dDeconvolve")
        opts, args = optparser.parse_args()

        self.afni_args = opts.afni_args.split()
        self.verbose = opts.verbose
        self.debug = opts.debug
        if opts.etco2_files is not None:
            self.etco2_files = opts.etco2_files.split()
        else:
            self.etco2_files = None
        self.plot_ecto2 = opts.plot_ecto2
#        self.slice_order = opts.slice_order
        self.reml = opts.reml

        self.ParseAfniCmdline()

#       Get TR from the EPI data.
        self.GetMriInfo()

        if self.etco2_files is not None:
#           Read the etco2 data.
            self.GetEtco2()

#        for slc in xrange(self.nslices):
#            print 'Slice: %d, offset: %f' % (slc, self.GetTimeOffset(slc))

        print 'Regressor files: ', self.regressor_files
        print 'Stimulus timing files: ', self.timing_files
        print 'Data files: ', self.data_files
        print 'Number of runs %d' % self.nruns
        print 'TR: %d' % self.TR

    def ParseAfniCmdline(self):
        self.timing_files = []
        self.data_files = []
        args = self.afni_args[:]
        j = len(args) - 1
        self.bucket_file = None; 
        self.mat_jpeg_file = None
        self.mat_1d_file = None
        self.regressor_files = []
        nrg = 0
        while j >= 0:
            wd = args.pop()
            if wd == '-stim_file':
                self.regressor_files.append((self.afni_args[j+2], j+2))
                nrg += 1
            elif wd == '-stim_times':
                self.timing_files.append((self.afni_args[j+2], j+2))
                nrg += 1
            elif wd == '-input':
                i = j + 1
                while not self.afni_args[i].startswith('-'):
                    self.data_files.append((self.afni_args[j+i], j+i))
                    i += 1
            elif wd == '-bucket':
                self.bucket_file = (self.afni_args[j+1], j+1)
                self.outdir = os.path.dirname(self.bucket_file[0])
                self.outbase = os.path.basename(self.bucket_file[0])
            elif wd == '-xjpeg':
                self.mat_jpeg_file = (self.afni_args[j+1], j+1)
            elif wd == '-x1D':
                self.mat_1d_file = (self.afni_args[j+1], j+1)
            j -= 1
        self.nruns = len(self.data_files)

    def Read1dFile(self, filename):
        if filename.endswith(']'):
#           Extract a single column from the file.
            wds = filename[:-1].split('[')
            fname = wds[-2]
            col = int(wds[-1]) - 1
        else:
            fname = filename
            col = 0

        f = open(fname, 'r')
        lines = f.readlines()
        f.close()
        nlines = len(lines)

        stim_times = {}
        if nlines > self.nruns:
#           Column format.
            words = (' '.join(lines)).split()
            data = []
            for word in words:
                if not '*' in word:
                    data.append(float(word.strip()[col]))
            stim_times[0] = array(data).astype(float)
            format = 'column'
            stim_times['N'] = 1
        elif len(lines) == self.nruns:
#           Single line per run format.
            run = 0
            for line in lines:
                words = line.split()
                if words[-1] == '*':
                    words = words[:-1]
                else:
                    raise RuntimeError('1D line format not recognized: %s' % \
                                                                ' '.join(words))
                stim_times[run] = array(map(lambda x: float(x.strip()), words))
                run += 1
            format = 'row'
            stim_times['N'] = len(lines)
        else:
            raise RuntimeError('Number of runs in 1D file is incorrect.')
        stim_times['format'] = format
#        for i in xrange(stim_times['N']):
#            print 'stim times: ', filename, i, '\n', stim_times[i]
        return stim_times

    def GetMriInfo(self):
        self.tdims = []
        self.tdim_total = 0
        self.w = []
        self.nruns = len(self.data_files)
        for fname in self.data_files:
            w = Wimage(fname[0])
            self.w.append(w)
            self.tdim_total += int(w.hdr['tdim'])
            self.tdims.append(int(w.hdr['tdim']))
        self.slice_order = w.hdr['subhdr'].get('SliceOrder', 'unknown')
        self.xdim, self.ydim, self.zdim = w.hdr['dims'][:3]
        self.nslices = int(w.hdr['zdim'])
        self.TR = w.hdr['tsize']
        if self.TR > 500:
#           Must be in ms, convert to seconds.
            self.TR /= 1000.

    def InsertEtco2Regressor(self, args, slc):
        """
        Insert resampled end-tidal CO2 signal as regressor.
        """
        fname = self.WriteTmpRegressor(self.etco2_data[slc])
        if slc == 0:
#           First slice.  Set the -num_stimts argument.
            for i in xrange(len(args)):
                if '-num_stimts' in args[i]:
                    self.nstim_orig = int(args[i+1])
                    self.pos_num_stimts = i+1
                    break
            for i in xrange(len(args)):
                if '-stim_times' in args[i] and int(args[i+1]) == self.nstim_orig:
                    for j in xrange(len(args)-i-1):
                        if args[j].startswith('-'):
                            self.pos_last_stim = j + i
                            break
                    else:
                        self.pos_last_stim = len(args) - 1
                    break
#        new_args = args[:]
        args[self.pos_num_stimts] = '%d' % (self.nstim_orig + 1)
        new_args = args[:self.pos_last_stim]
        new_args.append('-stim_file')
        new_args.append('%d' % (self.nstim_orig + 1))
        new_args.append(fname)
        new_args.append('-stim_label')
        new_args.append('%d' % (self.nstim_orig + 1))
        new_args.append('etCO2')
        new_args += args[self.pos_last_stim:]
        return new_args
                    

    def WriteTmpRegressor(self, regressor):
        fname = '%s/tmp.1D' % self.tmpdir
        f = open(fname, 'w')
        for i in xrange(regressor.shape[0]):
            f.write('%f\n' % regressor[i])
#        f.write('*')
        f.close()
        return fname

    def ProcessEtco2(self, data, rate):
        data_out = data - data.mean()
        data_out /= abs(data_out).max()
        if self.plot_ecto2:
            x_coords = arange(data_out.shape[0])
            pg = ScatterPlot(1, 1, height=3, width=8)
            pg.AddPlot( \
               x_coords, \
               data_out, \
               ymax = data.max(), \
               x_label='Frame', \
               y_label='Etco2 regressor', \
               overplot=False, \
               markersize=5, \
               linewidth=1.25, \
               xgrid_lines=False, \
               ygrid_lines=False, \
               column_gap=.35, \
               lineonly=True)
#                pg.AddLegend(loc='best')
            pg.Show()
        return data_out

    def GetEtco2(self):
        etco2_data = {}
        x_coords = arange(self.tdims[0])
        for run in xrange(self.nruns):
            mat = loadmat(self.etco2_files[run], struct_as_record=True)
            self.etco2_rate_Hz = mat['sample_rate_Hz'].squeeze()
            etco2_data[run] = []
            data = self.ProcessEtco2(mat['etco2'].squeeze(), self.etco2_rate_Hz)
            for slc in xrange(self.zdim):
                etco2_data[run].append( \
                self.InterpEtco2(slc, run, data.squeeze(), self.etco2_rate_Hz))
   #             if self.plot_ecto2:
   #                 if slc in slcs:
   #                     pg.AddPlot( \
   #                        x_coords, \
   #                        etco2_data[run][slc], \
   #                        ymax = etco2_data[run][slc].max(), \
   #                        x_label='Frame', \
   #                        y_label='Etco2 regressor', \
   #                        overplot=False, \
   #                        markersize=5, \
   #                        linewidth=1.25, \
   #                        xgrid_lines=False, \
   #                        ygrid_lines=False, \
   #                        column_gap=.35, \
   #                        legstr = 's%d' % slc, \
   #                        lineonly=True)
   #                     pg.AddLegend(loc='best')
        self.etco2_data = []
        for slc in xrange(self.zdim):
            t = 0
            conc_data = zeros(self.tdim_total, float)
            for run in xrange(self.nruns):
                conc_data[t:t+self.tdims[run]] = etco2_data[run][slc]
                t += self.tdims[run]
            conc_data -= conc_data.mean()
            self.etco2_data.append(conc_data)

    def InterpEtco2(self, slc, run, regressor, rate):
        offset = self.GetTimeOffset(slc)
        nominal_times = self.TR*arange(self.tdims[run])
        idx = ((nominal_times + offset)*rate).astype(int)
        nsamp = idx.shape[0] - 1
        while idx[nsamp]/rate >= regressor.shape[0]/rate:
            nsamp -= 1
        nsamp += 1
        out = zeros(self.tdims[run], float)
        out[:nsamp] = regressor.take(idx[:nsamp])
        return out


    def GetTimeOffset(self, slcno):
        """
        Assume alternating-sequential slice ordering.
        """
        if self.slice_order == 'altplus':
            slc = int(slcno)
        elif self.slice_order == 'altminus':
            slc = self.zdim - int(slcno) - 1
        else:
            raise RuntimeError('Unrecognized slice timing pattern.')
#        print 'Slice order: %s, slice: %d, offset: %1.3f' % (self.slice_order,  slcno, self.TR*(float(slc % 2)/2. + float(slc % self.nslices/2)/float(self.nslices)))
        return self.TR*(float(slc % 2)/2. + \
                        float(slc % self.nslices/2)/float(self.nslices))
                        

    def InterpRegressor(self, slc, run, regressor):
        """
        Use cubic spline interpolation to interpret regressor to slice-specific
        timing.
        """
        offset = self.GetTimeOffset(slc)
        nominal_times = self.TR*arange(self.tdims[run])
        f = interp1d(nominal_times, regressor, kind='cubic') 
        return f(nominal_times + offset)

    def AdjustStimTiming(self, slc, stim_times):
        offset = self.GetTimeOffset(slc)
        for key in xrange(self.nruns):
            stim_times[key][:] -= offset
        return stim_times

    def CreateMask(self, image):
        if image.ndim == 4:
            img = image.mean(0)
        else:
            img = image
#       First mask off relative to maximum.
        msk = where(img > img.max()/4., 1, 0)
        img1 = msk*img

#       Now that we can get a reasonable mean, mask using the mean.
        imgmean = img1.sum()/msk.sum()
        return where(img > imgmean/4., 1., 0.)

    def RewriteEpiData(self):
        """
        Split EPI data into single-slice files.
        """
        self.epifiles = {}
        hdrslc = self.w[0].hdr.copy()
        hdrslc['dims'][2] = 1
        hdrslc['filetype'] = 'nii'
        hdrmsk = hdrslc.copy()
        hdrmsk['dims'] = array((self.xdim, self.ydim, 1,1,1));
        for run in xrange(self.nruns):
            epidata = self.w[run].readfile()
            mask = self.CreateMask(epidata)
            hdrslc['dims'][3] = self.tdims[run]
            for z in xrange(self.zdim):
                prefix = self.NewPrefix(self.data_files[run][0], z, run)
#                print 'Rewriting run %d, slice %d to %s' % (run, z, prefix)
                writefile(prefix, epidata[:,z,:,:], hdrslc)
                writefile(prefix+'_mask', mask[z,:,:], hdrmsk)
                if self.epifiles.has_key(z):
                    self.epifiles[z].append((prefix+'.nii', prefix+'_mask.nii'))
                else:
                    self.epifiles[z] = [(prefix+'.nii', prefix+'_mask.nii')]

    def Exec(self, cmd):
        if self.verbose:
            print cmd
        self.flog.write(cmd + '\n')
        f = Popen(cmd, shell=True, stdout=PIPE, stderr=PIPE)
        output, errout = f.communicate()
        errs = f.wait()
        if errs:
            raise RuntimeError('Error executing cmd: %s' % cmd)
        lines = errout.split('\n')
        for i in xrange(len(lines)):
            line = lines[i]
            if 'warning' in line.lower() or 'error' in line.lower():
                if 'fatal' in line.lower():
                    print line
#                print lines[i+1]
#                print lines[i+2]
                self.flog.write(line + '\n')
#                self.flog.write(line[i+1] + '\n')
#                self.flog.write(line[i+2] + '\n')
        return output, errout

    def NewPrefix(self, filename, slc, run=None):
        fname = filename.replace('.BRIK','')
        fname = fname.replace('.HEAD','')
        fname = fname.replace('+orig','')
        fname = fname.replace('.1D','')
        if run is None:
            fname = '%s/%s_%d' % (self.tmpdir, os.path.basename(fname), slc)
        else:
            fname = '%s/%s_%d_%d' % (self.tmpdir, os.path.basename(fname), run, slc)
        return fname.replace('.nii','')
                
    def Process(self):
        self.RewriteEpiData()
        self.new_bucket_files = []
        self.new_jpeg_files = []
        self.new_mat1d_files = []
        self.reml_files = []
        for slc in xrange(self.nslices):
            if self.verbose:
                print '\nProcessing slice %d' % slc

#           Adjust timing files for regressors.
            new_time_files = []
            for time_file in self.timing_files:
                stim_times = self.Read1dFile(time_file[0])
                stim_times = self.AdjustStimTiming(slc, stim_times)
                fname = '%s.1D' % self.NewPrefix(time_file[0], slc)
                self.Write1dFile(stim_times, fname)
                new_time_files.append(fname)

#           Create a new 3dDeconvolve command.
            new_args = self.afni_args[:]
            for i in xrange(len(self.timing_files)):
                j = self.timing_files[i][1]
                new_args[self.timing_files[i][1]] = new_time_files[i]

            for i in xrange(self.nruns):
                new_args[self.data_files[i][1]] = self.epifiles[slc][0][i]

            if self.bucket_file is not None:
                new_buckfile = self.NewPrefix(self.bucket_file[0], slc)
                new_args[self.bucket_file[1]] = new_buckfile
                self.new_bucket_files.append(new_buckfile)

            if self.mat_jpeg_file is not None:
                new_jpegfile = self.NewPrefix(self.mat_jpeg_file[0], slc)
                new_args[self.mat_jpeg_file[1]] = new_jpegfile 
                self.new_jpeg_files.append(new_jpegfile)

            if self.mat_1d_file is not None:
                new_mat1dfile = self.NewPrefix(self.mat_1d_file[0], slc)
                new_args[self.mat_1d_file[1]] = new_mat1dfile 
                self.new_mat1d_files.append(new_mat1dfile)

            if self.etco2_files is not None:
                new_args = self.InsertEtco2Regressor(new_args, slc)

            output, errors = self.Exec('3dDeconvolve %s' % ' '.join(new_args))

            if self.reml:
                reml_bucket, reml_var = self.RemlFit(new_buckfile, slc)
                self.reml_files.append(reml_bucket, reml_var)

#       Collect processed data and store in original destination.
        self.GatherResults()

        self.Clean()
        sys.exit(0)

    def RemlFit(self, prefix, slc):
        """
        Execute AFNI restricted maximum likelihood command
        """

        f = open(reml_script, 'r')
        lines = f.read().split()
        f.close()
        for line in lines:
            if line.startswith('3dREMLfit'):
                cmd = line.strip()
                break
        ibuck = cmd.find('-Rbuck')
        reml_bucket = cmd[ibuck+6:].strip().split()[0]
        ivar = cmd.find('-Rvar')
        var_prefix = cmd[ivar+5:].strip().split()[0]
        print 111, reml_bucket, var_prefix

#       Execute the command.
        reml_script = '%s.REML_cmd' % prefix
        cmd = 'bash %s -mask %s' % (reml_script, self.epifiles[slc][1])
        output, errors = self.Exec(cmd)

        return reml_bucket, var_prefix


    def GatherResults(self):
        dname = os.path.dirname(os.path.abspath(self.bucket_file[0]))
        fname = os.path.basename(self.bucket_file[0])
        cmd = '3dZcat -prefix %s/%s -datum_type float' % (dname, fname)
        for fname in self.new_bucket_files:
            cmd += ' %s+orig' % fname
        output, errors = self.Exec(cmd)

        if self.reml:
            reml_buck, reml_var = self.reml_files[0]
            fname = os.path.basename(reml_buck)
            cmd_buck = '3dZcat -prefix %s/%s -datum_type float' % (dname, fname)
            fname = os.path.basename(reml_var)
            cmd_var = '3dZcat -prefix %s/%s -datum_type float' % (dname, fname)
            for (buck_file, var_file) in self.reml_files:
                cmd_buck += ' %s+orig' % buck_file
                cmd_var += ' %s+orig' % var_file
            output, errors = self.Exec(cmd_buck)
            output, errors = self.Exec(cmd_var)

        outpath = '%s/matrix' % (os.path.dirname(self.bucket_file[0]))
        if not os.path.exists(outpath):
            os.makedirs(outpath)

        cmd = 'cp %s/*jpg %s' % (self.tmpdir, outpath)
        output, errors = self.Exec(cmd)
        cmd = 'cp %s/*xmat.1D %s' % (self.tmpdir, outpath)
        output, errors = self.Exec(cmd)
        cmd = 'cp %s/*REML_cmd %s' % (self.tmpdir, outpath)
        output, errors = self.Exec(cmd)

    def Write1dFile(self, stim_times, time_file):
        if self.verbose:
            print 'Writing timing file to %s' % time_file
        f = open(time_file, 'w')
        if stim_times['format'] == 'column':
            for value in stim_times[0].tolist():
                f.write('%1.4f\n' % value)
            f.write('*')
        elif stim_times['format'] == 'row':
            for i in xrange(stim_times['N']):
                line = map(lambda x: '%1.4f ' % x, stim_times[i].tolist())
                self.flog.write('write1d: run: %d, %s\n' % (i, line))
                f.write(' '.join(line) + '*\n')
        f.close()

    def Clean(self):
        if not self.debug:
            cmd = '/bin/rm -r %s' % self.tmpdir
            self.Exec(cmd)
        self.flog.close()

def slice_deconvolve():
    sd = None
    try:
        sd = SliceDeconvolve()
        sd.Process()
    except (IOError, RuntimeError, OSError, IndexError, ValueError), errmsg:
        sys.stderr.write('%s\n%s\n' % (errmsg, except_msg()))
        if hasattr(sd, 'flog'):
            flog.write('%s\n%s\n' % (errmsg, except_msg()))
        if hasattr(sd, 'tmpdir') and not sd.debug:
            sd.Clean()
        sys.exit()

if __name__ == '__main__':
    slice_deconvolve()

